---
import Base from "@/layouts/Base.astro";
const FormId = import.meta.env.PUBLIC_FORMCARRY_ENDPOINT;
---

<Base title="CONTACT">
  <form id="js-contactForm" novalidate>
    <label>
      <p>返信用メールアドレス</p>
      <input
        id="js-email"
        type="email"
        name="email"
        placeholder="hoge@mail.com"
        required
      />
    </label>

    <label>
      <p>お問い合わせ内容</p>
      <textarea
        id="js-message"
        name="message"
        placeholder="お問い合わせ内容"
        rows="6"
        required
        minlength="10"
        maxlength="800"></textarea>
    </label>

    <button id="js-submit" type="submit" disabled>送信</button>
    <p id="js-errorText" style="color: red;"></p>
  </form>
</Base>

<script define:vars={{ FormId }}>
  const contactForm = document.getElementById("js-contactForm");
  const emailInput = document.getElementById("js-email");
  const messageInput = document.getElementById("js-message");
  const errorText = document.getElementById("js-errorText");
  const submitButton = document.getElementById("js-submit");

  emailInput?.addEventListener("input", validateForm);
  messageInput?.addEventListener("input", validateForm);

  function validateForm() {
    if (!emailInput?.checkValidity()) {
      errorText.textContent = "正しい形式のEmailを入力してください。";
      submitButton.setAttribute("disabled", "");
    } else if (!messageInput?.checkValidity()) {
      errorText.textContent =
        "10文字以上、800文字以下のお問い合わせ内容を入力してください。";
      submitButton.setAttribute("disabled", "");
    } else {
      errorText.textContent = "";
      submitButton.removeAttribute("disabled");
    }
  }

  contactForm?.addEventListener("submit", (e) => {
    e.preventDefault();

    fetch(`https://formcarry.com/s/${FormId}`, {
      recapture: false,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({
        email: emailInput.value,
        message: messageInput.value,
      }),
    })
      .then((res) => {
        if (res.ok) {
          alert("送信しました。");
          // TODO: Snackバーかボタン替えるか。できれば今と同じUXにしたい。
          contactForm.reset();
        } else {
          // Formcarry error
          alert("送信に失敗しました。");
        }
      })
      .catch((err) => {
        // network error
        alert("送信に失敗しました。");
        console.error(err);
      });
  });
</script>

<style>
  dialog {
    margin: auto;
    padding: 24px;
    border: 0;
    border-radius: 0.6rem;
    box-shadow: 0 0 1em black;
    /* overscroll-behavior: contain; */
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(4px);
  }

  form {
    display: flex;
    flex-direction: column;
  }

  input,
  textarea {
    /* border: 2px dashed yellow; */
  }

  button:disabled {
    opacity: 0.2;
  }
</style>
